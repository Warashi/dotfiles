[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufRead', 'BufNewFile']
lua_add = '''
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

  -- Use LspAttach autocommand to only map the following keys
  -- after the language server attaches to the current buffer
  vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
      -- Enable completion triggered by <c-x><c-o>
      vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

      -- Buffer local mappings.
      -- See `:help vim.lsp.*` for documentation on any of the below functions
      local opts = { buffer = ev.buf }
      vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
      vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
      vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
      vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
      vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
      vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
      vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
      vim.keymap.set('n', '<space>wl', function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, opts)
      vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
      vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
      vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
      vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
      vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, opts)
    end,
  })
'''
lua_source = '''
  local lspconfig = require("lspconfig")
  lspconfig.gopls.setup({})
  lspconfig.lua_ls.setup({})
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
depends = ['catppuccin']
on_source = 'nvim-lspconfig'
lua_source = '''
  require("fidget").setup({})
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = ['plenary.nvim']
on_source = ['nvim-lspconfig']
lua_source = '''
  local null_ls = require("null-ls")
  null_ls.setup({
    sources = {
      --- nix ---
      null_ls.builtins.diagnostics.deadnix,
      null_ls.builtins.diagnostics.statix,
      null_ls.builtins.formatting.alejandra,

      --- lua ---
      null_ls.builtins.diagnostics.selene.with({
        cwd = function() return require("null-ls.utils").root_pattern("selene.toml")(vim.api.nvim_buf_get_name(0)) end,
      }),
      null_ls.builtins.formatting.stylua.with({
        cwd = function() return require("null-ls.utils").root_pattern("stylua.toml")(vim.api.nvim_buf_get_name(0)) end,
      }),

      --- shell ---
      null_ls.builtins.diagnostics.shellcheck,
      null_ls.builtins.diagnostics.zsh,
      null_ls.builtins.formatting.shfmt,
      null_ls.builtins.formatting.shellharden,

      --- other ---
      null_ls.builtins.diagnostics.todo_comments,
    },
  })
'''

[[plugins]]
repo = 'folke/neoconf.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require("neoconf").setup({})
'''

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require("neodev").setup({})
'''


