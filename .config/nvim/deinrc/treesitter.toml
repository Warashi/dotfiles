[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'BufNewFile']
hook_post_update = 'TSUpdate'
lua_source = '''
  require("nvim-treesitter.configs").setup({
    sync_install = false,
    highlight = {
      enable = true,
      additional_vim_regex_highlighting = false,
      disable = function(lang)
        local byte_size = vim.api.nvim_buf_get_offset(0, vim.api.nvim_buf_line_count(0))
        if byte_size > 1024 * 1024 then return true end

        if not pcall(function() vim.treesitter.get_parser(0, lang):parse() end) then return true end
        if not pcall(function() vim.treesitter.query.get(lang, "highlights") end) then return true end

        return false
      end,
    },
  })
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_source = 'nvim-treesitter'
lua_source = '''
  require("treesitter-context").setup()
'''

[[plugins]]
repo = 'thinca/vim-partedit'
on_cmd = 'Partedit'
hook_add = '''
  let g:partedit#prefix_pattern = '\s*'
  let g:partedit#auto_prefix = 0
'''

[[plugins]]
repo = 'monaqa/nvim-treesitter-clipping'
depends = ['nvim-treesitter', 'vim-partedit']
on_lua = 'nvim-treesitter-clipping'
lua_add = '''
  vim.api.nvim_create_autocmd("FileType", {
    pattern = { "toml", "markdown" },
    callback = function()
      vim.keymap.set("n", "<C-p>", function()
        require("nvim-treesitter-clipping.internal").clip()
        vim.keymap.set("n", "Q", "<Cmd>w<CR><Cmd>ParteditEnd<CR>", { buffer = true })
      end, { buffer = true })
    end,
  })
'''
