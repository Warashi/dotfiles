[[plugins]]
repo = '~/.config/nvim/swim'
on_event = 'InsertEnter'
lua_source = '''
  require("swim")
'''

[[plugins]]
repo = 'RRethy/nvim-base16'
on_event = ['BufEnter']
hook_source = '''
  colorscheme base16-gruvbox-dark-medium
  highlight Visual gui=reverse
'''

[[plugins]]
repo = 'RRethy/vim-illuminate'
on_event = ['BufEnter']

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'
on_ft = 'gitrebase'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
lua_source = '''
  require("gitsigns").setup({
    on_attach = function(bufnr)
      local gs = package.loaded.gitsigns

      local function map(mode, l, r, opts)
        opts = opts or {}
        opts.buffer = bufnr
        vim.keymap.set(mode, l, r, opts)
      end

      -- Navigation
      map("n", "]c", function()
        if vim.wo.diff then return "]c" end
        vim.schedule(function() gs.next_hunk() end)
        return "<Ignore>"
      end, { expr = true })

      map("n", "[c", function()
        if vim.wo.diff then return "[c" end
        vim.schedule(function() gs.prev_hunk() end)
        return "<Ignore>"
      end, { expr = true })

      -- Actions
      map({ "n", "v" }, "<leader>hs", ":Gitsigns stage_hunk<CR>")
      map({ "n", "v" }, "<leader>hr", ":Gitsigns reset_hunk<CR>")
      map("n", "<leader>hS", gs.stage_buffer)
      map("n", "<leader>hu", gs.undo_stage_hunk)
      map("n", "<leader>hR", gs.reset_buffer)
      map("n", "<leader>hp", gs.preview_hunk)
      map("n", "<leader>hb", function() gs.blame_line({ full = true }) end)
      map("n", "<leader>tb", gs.toggle_current_line_blame)
      map("n", "<leader>hd", gs.diffthis)
      map("n", "<leader>hD", function() gs.diffthis("~") end)
      map("n", "<leader>td", gs.toggle_deleted)
      map("n", "<leader>hl", gs.setloclist)

      -- Text object
      map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>")
    end,
  })
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
on_event = 'VimEnter'
lua_source = '''
  require("toggleterm").setup({
    open_mapping = [[<c-\>]],
    direction = "float",
    float_opts = {
      border = "rounded",
    },
  })

  local terms = require("toggleterm.terminal")
  local Terminal = terms.Terminal
  local tig = Terminal:new({
    cmd = "tig",
    hidden = true,
    on_open = function(term)
      vim.keymap.set("n", "q", "<cmd>close<cr>", { buffer = term.bufnr, silent = true })
      vim.keymap.set("n", [[<c-\>]], "<cmd>close<cr>", { buffer = term.bufnr, silent = true })
      vim.keymap.set("t", [[<c-\>]], "<cmd>close<cr>", { buffer = term.bufnr, silent = true })
    end,
  })

  function TIG_toggle() tig:toggle() end

  vim.keymap.set("n", "<leader>g", TIG_toggle, { silent = true })

  local function smart_close()
    if tig:is_open() then tig:close() end
    local terminals = terms.get_all()
    -- count backwards from the end of the list
    for i = #terminals, 1, -1 do
      local term = terminals[i]
      if term then term:close() end
    end
  end

  vim.api.nvim_create_user_command("ToggleTermClose", smart_close, {})
'''

[[plugins]]
repo = 'folke/trouble.nvim'
on_cmd = ['TroubleToggle']
on_source = ['gitsigns.nvim']
lua_add = '''
  vim.keymap.set("n", "<leader>t", "<cmd>TroubleToggle<cr>", opts)
'''
lua_source = '''
  require("trouble").setup({})
'''

[[plugins]]
repo = 'nvim-zh/colorful-winsep.nvim'
on_event = 'VimEnter'
lua_source = '''
  require("colorful-winsep").setup({})
'''

[[plugins]]
repo = 'delphinus/dwm.nvim'
depends = ['nvim-notify']
on_event = 'VimEnter'
lua_source = '''
  local notify = require("notify")
  local dwm = require("dwm")
  dwm.setup{
    key_maps = false,
    master_pane_count = 1,
    master_pane_width = "60%",
  }
  vim.keymap.set("n", "<C-j>", "<C-w>w")
  vim.keymap.set("n", "<C-k>", "<C-w>W")
  vim.keymap.set("n", "<C-Space>", dwm.focus)
  vim.keymap.set("n", "<C-l>", dwm.grow)
  vim.keymap.set("n", "<C-h>", dwm.shrink)
  vim.keymap.set("n", "<C-n>", dwm.new)
  vim.keymap.set("n", "<C-q>", dwm.rotateLeft)
  vim.keymap.set("n", "<C-s>", dwm.rotate)
  vim.keymap.set("n", "<C-c>", function()
    notify("closing!", vim.log.levels.INFO)
    dwm.close()
  end)
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_cmd = ["AerialToggle!"]
lua_add = '''
  vim.keymap.set("n", "<leader>a", "<cmd>AerialToggle!<cr>")
'''
lua_source = '''
  require("aerial").setup({
    backends = {
      "lsp",
      "treesitter",
      "markdown",
      "man",
    },
    layout = {
      width = nil,
      min_width = 20,
      max_width = { 80, 0.5 },
      win_opts = {
        winblend = 30,
      },
      default_direction = "float",
      placement = "edge",
    },
    highlight_mode = "last",
    manage_folds = "auto",
    close_on_select = true,
    show_guides = true,
    float = {
      border = "rounded",
      relative = "win",
      height = nil,
      min_height = { 8, 0.1 },
      max_height = 0.9,
      override = function(conf, source_winid)
        conf.anchor = "NE"
        conf.col = vim.fn.winwidth(source_winid)
        conf.row = 0
        return conf
      end,
    },
  })
'''
