* おまじない
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

* initialize leaf.el
#+begin_src emacs-lisp
  (require 'leaf)
  (leaf leaf-keywords
    :ensure t
    :init
    ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
    (leaf hydra :ensure t)
    (leaf blackout :ensure t)

    :config
    ;; initialize leaf-keywords.el
    (leaf-keywords-init))
#+end_src

* kitty keyboard protocol
#+begin_src emacs-lisp
  (leaf kkp
    :ensure t
    :custom
    (kkp-super-modifier . 'meta) ;; super as meta
    :global-minor-mode global-kkp-mode)
#+end_src

* emacs -q -lした時に、user-emacs-directoryが変わるように
#+begin_src emacs-lisp :tangle no
  (when load-file-name
    (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

* M-x customize したときの設定保存場所を変える
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "customize.el"))
  (when (file-readable-p custom-file)
    (load-file custom-file))
#+end_src

* /site-lisp を load-path に追加
#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "site-lisp"))
#+end_src

* basic key bindings
** C-hをbackspaceにする
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key key-translation-map (kbd "M-h") (kbd "M-DEL"))
#+end_src

** Commands as Meta
#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'meta)
#+end_src

** 誤って終了しないようにする
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-x C-C") 'server-edit)
  (global-unset-key (kbd "C-z"))
  (defalias 'exit 'save-buffers-kill-emacs)
#+end_src

** hippie-expandを使う
#+begin_src emacs-lisp
  (substitute-key-definition 'dabbrev-expand 'hippie-expand global-map)
#+end_src

* PATH設定
#+begin_src emacs-lisp
  (leaf exec-path-from-shell
    :ensure t
    :custom
    (exec-path-from-shell-variables . '("PATH" "MANPATH" "SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
    (exec-path-from-shell-arguments . nil)
    :config
    (exec-path-from-shell-initialize))
#+end_src

* org
#+begin_src emacs-lisp
  (leaf org
    :ensure t
    :init
    (leaf org-roam
      :ensure t
      :bind (("C-c o c" . org-roam-capture)
             ("C-c o i" . org-roam-insert)
             ("C-c o f" . org-roam-find)))
    (leaf ox-hugo
      :ensure t
      :require t
      :after ox))
#+end_src

* tree-sitter
#+begin_src emacs-lisp
  (leaf treesit-auto
    :ensure t
    :global-minor-mode global-treesit-auto-mode)
#+end_src

* magit
#+begin_src emacs-lisp
  (leaf magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+end_src

* copilot
#+begin_src emacs-lisp
  (leaf copilot
    :ensure t
    :hook prog-mode-hook
    :bind (:copilot-completion-map
  	 ("TAB" . copilot-accept-completion)
  	 ("<tab>" . copilot-accept-completion)))
#+end_src
