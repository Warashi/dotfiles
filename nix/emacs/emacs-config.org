* おまじない
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

#+RESULTS:

* use-package
#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-ensure-function #'ignore)
#+end_src

* emacs -q -lした時に、user-emacs-directoryが変わるように
#+begin_src emacs-lisp :tangle no
  (when load-file-name
    (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

* M-x customize したときの設定保存場所を変える
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "customize.el"))
  (when (file-readable-p custom-file)
    (load-file custom-file))
#+end_src

* /site-lisp を load-path に追加
#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "site-lisp"))
#+end_src

* server-start
#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* basic key bindings
** C-hをbackspaceにする
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key key-translation-map (kbd "M-h") (kbd "M-DEL"))
#+end_src

** Commands as Meta
#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'meta)
#+end_src

** 誤って終了しないようにする
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-C") 'server-edit)
  (global-unset-key (kbd "C-z"))
  (defalias 'exit 'save-buffers-kill-emacs)
#+end_src

** hippie-expandを使う
#+begin_src emacs-lisp
  (substitute-key-definition 'dabbrev-expand 'hippie-expand global-map)
#+end_src

* PATH設定
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
      (add-to-list 'exec-path-from-shell-variables var))
    (exec-path-from-shell-initialize))
#+end_src

* 基本的なUI/UX設定
** font
#+begin_src emacs-lisp
  (defvar my-font-size 180)
  (set-face-attribute 'default nil :family "PlemolJP Console NF" :height my-font-size)
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :ensure t
    :init
    (setq catppuccin-flavor 'frappe)
    (load-theme 'catppuccin :no-confirm))
#+end_src

** 各種バーを消す
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp #'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp #'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

** 折り返し表示まわり
#+begin_src emacs-lisp
  (setq-default truncate-lines nil)
  (setq truncate-partial-width-windows t)
#+end_src

** 雑多な設定
*** auth-sources
#+begin_src emacs-lisp
  (custom-set-variables
   `(auth-sources '(,(expand-file-name "authinfo.gpg" user-emacs-directory))))
#+end_src

*** いろいろな show の delay
#+begin_src emacs-lisp
  (defvar my-show-delay 0.125)
#+end_src

*** インデントにタブを使わない
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

*** 行の先頭で C-k を一回押すだけで行全体を消去する
#+begin_src emacs-lisp
  (setq kill-whole-line t)
#+end_src

*** 最終行に必ず一行挿入する
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

*** 補完時に大文字小文字を区別しない
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

*** ファイル先頭に #!...があるファイルを保存すると実行権をつける
#+begin_src emacs-lisp
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

*** gz ファイルも編集できるようにする
#+begin_src emacs-lisp
  (auto-compression-mode t)
#+end_src

*** バックアップファイルの場所変更
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file "backup"))))
#+end_src

*** シンボリックリンクまわり
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
  (setq auto-revert-check-vc-info t)
#+end_src

*** スクロール時にカーソルの相対位置を保つ
#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position :always)
#+end_src

*** カーソルの位置が何文字目かを表示する
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'column-number-mode)
#+end_src

*** カーソルの位置が何行目かを表示する
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'line-number-mode)
#+end_src

*** 左に行番号を表示
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'global-display-line-numbers-mode)
#+end_src

*** electric-pair-mode
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'electric-pair-mode)
#+end_src

*** prettify
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'global-prettify-symbols-mode)
#+end_src

*** 対応する括弧を表示
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'show-paren-mode)
#+end_src

* copilot.el
#+begin_src emacs-lisp
  (use-package copilot
    :ensure t
    :hook
    (prog-mode . copilot-mode)
    :config
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))
#+end_src

* mistty
#+begin_src emacs-lisp
  (use-package mistty
    :ensure t
    :bind (("C-c s" . mistty)))
#+end_src

* puni
#+begin_src emacs-lisp
  (use-package puni
    :ensure t
    :defer t
    :init
    (puni-global-mode))
#+end_src

* ddskk
#+begin_src emacs-lisp
  (use-package ddskk
    :ensure t
    :init
    (setq skk-user-directory (locate-user-emacs-file "ddskk"))
    (setq default-input-method "japanese-skk")
    (add-hook 'find-file-hook #'skk-latin-mode-on))
#+end_src

* direnv (envrc.el)
#+begin_src emacs-lisp
  (use-package envrc
    :ensure t
    :init
    (envrc-global-mode))
#+end_src

* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit)))
  (use-package forge
    :ensure t
    :after magit)
#+end_src

* diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

* consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

* vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* embark
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)    ;; pick some comfortable binding
     ("C-;" . embark-dwim))  ;; good alternative: M-.

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* confu
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t

    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-quit-no-match 'separator)
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* tempel
#+begin_src emacs-lisp
  ;; Configure Tempel
  (use-package tempel
    :ensure t

    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection
    :ensure t)
#+end_src

* wgrep.el
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
#+end_src

* eglot
#+begin_src emacs-lisp
  (use-package eglot
    :bind (:map eglot-mode-map
                ("C-c e r" . eglot-rename)
                ("C-c e o" . eglot-code-action-organize-imports)
                ("C-c e a" . eglot-code-actions)
                ("C-c e h" . eldoc)
                ("C-c e d" . xref-find-definitions))
    :config
    (add-to-list 'eglot-server-programs '((js-mode js-ts-mode typescript-mode typescript-ts-mode) . (eglot-deno "deno" "lsp")))
    (defclass eglot-deno (eglot-lsp-server) ()
      :documentation "A custom class for deno lsp.")
    (cl-defmethod eglot-initialization-options ((server eglot-deno))
      "Passes through required deno initialization options"
      (list :enable t
            :lint t)))

  (use-package eglot-tempel
    :ensure t
    :after (eglot tempel)
    :hook (eglot-managed-mode . eglot-tempel-mode))

  (use-package consult-eglot
    :ensure t
    :after (eglot)
    :bind (:map eglot-mode-map
                ("C-c e s" . consult-eglot-symbols)))
#+end_src

* treesit-auto
#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :config
    (global-treesit-auto-mode))
#+end_src

* prog-mode
** go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t)
#+end_src

** nix-mode
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src

** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src

** markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

** zig-mode
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t)
#+end_src

** fsharp-mode
#+begin_src emacs-lisp
  (use-package fsharp-mode
    :defer t
    :ensure t)
  (use-package eglot-fsharp
    :ensure t)
#+end_src

* util
** ppp
#+begin_src emacs-lisp
  (use-package ppp
    :ensure t)
#+end_src
