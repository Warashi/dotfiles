* おまじない
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

* initialize leaf.el
#+begin_src emacs-lisp
  (require 'leaf)
  (leaf leaf-keywords
    :ensure t
    :init
    (leaf hydra :ensure t)
    (leaf blackout :ensure t)

    :config
    (leaf-keywords-init))
#+end_src

* kitty keyboard protocol
#+begin_src emacs-lisp
  (leaf kkp
    :ensure t
    :global-minor-mode global-kkp-mode)
#+end_src

* emacs -q -lした時に、user-emacs-directoryが変わるように
emacs-overlay によってこのファイルは .emacs.d とは別のところから読み込まれるので、相性が悪い。
そのためオフにしておく。

#+begin_src emacs-lisp :tangle no
  (when load-file-name
    (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

* M-x customize したときの設定保存場所を変える
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "customize.el"))
  (when (file-readable-p custom-file)
    (load-file custom-file))
#+end_src

* /site-lisp を load-path に追加
#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "site-lisp"))
#+end_src

* basic key bindings
** C-hをbackspaceにする
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key key-translation-map (kbd "M-h") (kbd "M-DEL"))
#+end_src

** hippie-expandを使う
#+begin_src emacs-lisp
  (substitute-key-definition 'dabbrev-expand 'hippie-expand global-map)
#+end_src

* PATH設定
#+begin_src emacs-lisp
  (leaf exec-path-from-shell
    :ensure t
    :custom
    (exec-path-from-shell-variables . '("PATH" "MANPATH" "SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
    (exec-path-from-shell-arguments . nil)
    :config
    (exec-path-from-shell-initialize))
#+end_src

* font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "PlemolJP Console NF 11"))
#+end_src

* catppuccin-theme
#+begin_src emacs-lisp
  (leaf catppuccin-theme
    :ensure t
    :custom
    (catppuccin-flavor . 'frappe)
    :init
    (load-theme 'catppuccin :no-confirm))
#+end_src

* org
#+begin_src emacs-lisp
  (leaf org
    :ensure t
    :init
    (leaf org-tempo
      :after org
      :require t)
    (leaf org-capture
      :require uuidgen
      :bind (("C-c o o" . org-capture))
      :config
      (defun org-hugo-new-times-capture-template ()
	(let ((now (format-time-string "%+4Y-%+2m-%+2dT%T%:z")))
	  (mapconcat #'identity
		     `(
		       ,(concat "* " now)
		       ":PROPERTIES:"
		       ,(concat ":EXPORT_DATE: " now)
		       ,(concat ":EXPORT_FILE_NAME: " (uuidgen-4))
		       ":END:"
		       "%?\n")
		     "\n")))
      (add-to-list 'org-capture-templates
		   `("t"
		     "#times-warashi"
		     entry
		     (file ,(substitute-in-file-name "$HOME/ghq/github.com/Warashi/times.warashi.dev/contents.org"))
		     (function org-hugo-new-times-capture-template))))
    (leaf org-roam
      :ensure t
      :bind (("C-c o c" . org-roam-capture)))
    (leaf ox-hugo
      :ensure t
      :require t
      :after ox))
#+end_src

* tree-sitter
#+begin_src emacs-lisp
  (leaf treesit-auto
    :ensure t
    :global-minor-mode global-treesit-auto-mode)
#+end_src

* magit
#+begin_src emacs-lisp
  (leaf magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+end_src

* copilot
#+begin_src emacs-lisp
  (leaf copilot
    :ensure t
    :hook prog-mode-hook
    :bind (:copilot-completion-map
  	 ("TAB" . copilot-accept-completion)
  	 ("<tab>" . copilot-accept-completion)))
#+end_src

* mistty
#+begin_src emacs-lisp
  (leaf mistty
    :ensure t
    :bind (("C-c s" . mistty)))
#+end_src

* envrc
#+begin_src emacs-lisp
  (leaf envrc
    :ensure t
    :hook ((after-init-hook . envrc-global-mode)))
#+end_src

* uuidgen
#+begin_src emacs-lisp
  (leaf uuidgen
    :ensure t)
#+end_src

* languages
#+begin_src emacs-lisp
  (leaf go-mode
    :ensure t)
#+end_src
