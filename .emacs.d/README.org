* init.elc ビルド用の Makefile
#+begin_src makefile :tangle Makefile
  EMACS	?= emacs
  all: init.elc
  init.el: README.org
          $(EMACS) -Q -q --batch --eval \
             "(progn \
                    (require 'ob-tangle) \
                    (org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
          $(EMACS) -q -l init.el --batch --eval '(kill-emacs)'
  %.elc: %.el
          $(EMACS) -q -l init.el -batch -f batch-byte-compile $<
#+end_src

* init.el 本体
** おまじない
#+begin_src emacs-lisp :tangle init.el
  ;; -*- lexical-binding: t -*-
#+end_src

** emacs -q -lした時に、user-emacs-directoryが変わるように
#+begin_src emacs-lisp :tangle init.el
  (when load-file-name
    (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

** basic key bindings
*** C-hをbackspaceにする
#+begin_src emacs-lisp :tangle init.el
  (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
  (define-key key-translation-map (kbd "M-h") (kbd "M-DEL"))
#+end_src

*** command と option をどちらも meta として扱う
#+begin_src emacs-lisp :tangle init.el
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'meta)
#+end_src

*** 誤って終了しないようにする
#+begin_src emacs-lisp :tangle init.el
  (global-set-key (kbd "C-x C-C") 'server-edit)
  (global-unset-key (kbd "C-z"))
  (defalias 'exit 'save-buffers-kill-terminal)
#+end_src

** M-x customize したときの設定保存場所を変える
#+begin_src emacs-lisp :tangle init.el
  (setq custom-file (locate-user-emacs-file "customize.el"))
  (add-hook 'after-init-hook #'(lambda () (load-file custom-file)))
#+end_src

** 基本的なUI/UX設定
*** フォント設定
#+begin_src emacs-lisp :tangle init.el
  (defvar my-font-size 180)
  (set-face-attribute 'default nil :family "SF Mono Square" :height my-font-size)
  (setq-default line-spacing 5)
#+end_src

*** 各種バーを消す
#+begin_src emacs-lisp :tangle init.el
  ;; (setq-default mode-line-format nil) ;; 思ったより不便だったのでモードライン非表示はやめる
  ;; (menu-bar-mode -1) ;; native fullscreen にするために表示させる
  (when (fboundp #'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp #'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

*** 折り返し表示まわり
#+begin_src emacs-lisp :tangle init.el
  (setq-default truncate-lines nil)
  (setq truncate-partial-width-windows t)
#+end_src

*** 雑多な builtin 設定
**** いろいろな show の delay
#+begin_src emacs-lisp :tangle init.el
  (defvar my-show-delay 0.125)
#+end_src

**** インデントにタブを使わない
#+begin_src emacs-lisp :tangle init.el
  (setq-default indent-tabs-mode nil)
#+end_src

**** 行の先頭で C-k を一回押すだけで行全体を消去する
#+begin_src emacs-lisp :tangle init.el
  (setq kill-whole-line t)
#+end_src

**** 最終行に必ず一行挿入する
#+begin_src emacs-lisp :tangle init.el
  (setq require-final-newline t)
#+end_src

**** 補完時に大文字小文字を区別しない
#+begin_src emacs-lisp :tangle init.el
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

**** ファイル先頭に #!...があるファイルを保存すると実行権をつける
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

**** gz ファイルも編集できるようにする
#+begin_src emacs-lisp :tangle init.el
  (auto-compression-mode t)
#+end_src

**** バックアップファイルの場所変更
#+begin_src emacs-lisp :tangle init.el
  (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file "backup"))))
#+end_src

**** シンボリックリンクまわり
#+begin_src emacs-lisp :tangle init.el
  (setq vc-follow-symlinks t)
  (setq auto-revert-check-vc-info t)
#+end_src

**** スクロール時にカーソルの相対位置を保つ
#+begin_src emacs-lisp :tangle init.el
  (setq scroll-preserve-screen-position :always)
#+end_src

** leaf setup
#+begin_src emacs-lisp :tangle init.el
  (prog1 "prepare leaf"
    (prog1 "package"
      (custom-set-variables
       '(package-archives '(("org"   . "https://orgmode.org/elpa/")
                            ("melpa" . "https://melpa.org/packages/")
                            ("gnu"   . "https://elpa.gnu.org/packages/"))))
      (package-initialize))

    (prog1 "leaf"
      (unless (package-installed-p 'leaf)
        (unless (assoc 'leaf package-archive-contents)
          (package-refresh-contents))
        (condition-case err
            (package-install 'leaf)
          (error
           (package-refresh-contents)       ; renew local melpa cache if fail
           (package-install 'leaf))))

      (leaf leaf-keywords
            :package t
            :config (leaf-keywords-init)))

    (prog1 "optional packages for leaf-keywords"
      ;; optional packages if you want to use :hydra, :el-get,,,
      (leaf el-get
            :package t
            :custom ((el-get-git-shallow-clone  . t)))
      (leaf hydra :el-get t)))
#+end_src

** el-get sync
#+begin_src emacs-lisp :tangle init.el
  (el-get 'sync)
#+end_src
